import numpy as np   # 数据处理的库 numpy
import cv2           # 图像处理的库 OpenCv
import json
import time
from utils.db_utils import postgres_db, get_known_id_name_encoding, get_name_from_txt


known_face_id, known_face_names, known_face_encodings, known_face_tmp_id = get_known_id_name_encoding()
def get_name_id(face_encodings):
    """
    服务器端工作: 接受摄像头内所有的人脸, 与数据库中的人脸进行对比
    :param face_encodings: 一系列的位置人脸encoding的列表
    :return: 返回所有人脸的id和名字
    """
    # 定义一个新的列表, 储存识别出来的脸对应人名
    face_names = []
    face_id = []
    face_temp_id = []

    for encoding in face_encodings:
        print(encoding.shape)
        # 默认当前人脸为unknow, _id 为 none
        name, _id = 'Unknown', None

        # 遍历人脸, 获取与已知的encoding的欧氏距离, 获取最佳match
        distances = face_distance(known_face_encodings, encoding)

        best_match_index = np.argmin(distances)
        min_distance = distances[best_match_index]
        # 判断是否同一人的欧氏距离阈值, 如果是则更改name 和 _id
        if min_distance < 0.4:
            name = known_face_names[best_match_index]
            _id = known_face_id[best_match_index]
            temp_id = known_face_tmp_id[best_match_index]
        face_names.append(name)
        face_id.append(_id)
        face_temp_id.append(temp_id)
    return face_names, face_id, face_temp_id


def face_distance(known_encodings, encoding):
    """
    计算encoding与known_encodings的Euclidean距离
    :param known_encodings: 已知的所有脸的encoding
    :param encoding: 给定的未知的encoding
    :return: 返回一个列表, 每个元素是与encoding的欧氏距离
    """
    if len(encoding) == 0:
        return np.empty((0))
    return np.linalg.norm(known_encodings - encoding, axis=1)


if __name__ == "__main__":
    encodings = np.array([[-0.06653771549463272, 0.11146444082260132, 0.12440238893032074, -0.03164754807949066, -0.07741986960172653, -0.052251528948545456, -0.0452718660235405, -0.12470222264528275, 0.13816797733306885, -0.1152077317237854, 0.30777010321617126, -0.05984947085380554, -0.22960340976715088, -0.06158236414194107, -0.0368158295750618, 0.13717320561408997, -0.1720796525478363, -0.054847318679094315, 0.03207693248987198, -0.016324982047080994, 0.09520047903060913, -0.05028649419546127, 0.06936555355787277, 0.01444101333618164, -0.10460524260997772, -0.4248502850532532, -0.16103540360927582, -0.12525387108325958, 0.03820095211267471, -0.07820531725883484, -0.07559949159622192, 0.041290223598480225, -0.18277162313461304, -0.04992262274026871, -0.04785884916782379, 0.03455768898129463, -0.02554512768983841, -0.09900963306427002, 0.19031216204166412, 0.026386963203549385, -0.12277176976203918, 0.029416918754577637, -0.04534045606851578, 0.2189793586730957, 0.12152285128831863, 0.05403172969818115, 0.11551205813884735, -0.10862165689468384, 0.06065893918275833, -0.11007172614336014, 0.05542479455471039, 0.11487678438425064, 0.06607837229967117, 0.0483563169836998, -0.01173054426908493, -0.1539774388074875, 0.026989340782165527, 0.04025784879922867, -0.19124165177345276, 0.04079391434788704, 0.08694103360176086, -0.09753528237342834, -0.05202677845954895, -0.0361427366733551, 0.2763848900794983, 0.11055128276348114, -0.09807266294956207, -0.10787709802389145, 0.1593283861875534, -0.09044744819402695, -0.014550719410181046, -0.013175759464502335, -0.1954842507839203, -0.17338010668754578, -0.2335323840379715, 0.09246896207332611, 0.36300235986709595, 0.09598186612129211, -0.17719700932502747, 0.053821999579668045, -0.11677977442741394, -0.012124978005886078, 0.10209283232688904, 0.1530897617340088, -0.008745644241571426, 0.05082784593105316, -0.08224072307348251, 0.0614226758480072, 0.1501639038324356, -0.09588664770126343, -0.04987918213009834, 0.21729464828968048, -0.050959691405296326, 0.10210547596216202, 0.04017883539199829, -0.01896556466817856, -0.093389593064785, 0.03875189274549484, -0.08343469351530075, 0.025276564061641693, 0.05463620275259018, -0.07922526448965073, -0.06038445234298706, 0.05905422568321228, -0.17931686341762543, 0.0898800939321518, -0.012743934988975525, -0.03877785801887512, -0.004718668758869171, -0.06470093131065369, -0.131295308470726, -0.04685156047344208, 0.13748934864997864, -0.28045785427093506, 0.23786547780036926, 0.2017388641834259, 0.052667610347270966, 0.1870713084936142, 0.09802237153053284, 0.07056915760040283, 0.02252197265625, -0.045353963971138, -0.19393855333328247, -0.017421327531337738, 0.11406006664037704, 0.008461438119411469, 0.0672500729560852, -0.012140557169914246]])
    start_time = time.time()
    result = get_name_id(encodings)
    end_time = time.time()
    print(end_time-start_time)
